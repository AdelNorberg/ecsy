{"version":3,"file":"ecsy.min.js","sources":["../../src/Utils.js","../../src/SystemManager.js","../../src/ObjectPool.js","../../src/EventDispatcher.js","../../src/Query.js","../../src/QueryManager.js","../../src/Component.js","../../src/SystemStateComponent.js","../../src/EntityManager.js","../../src/ComponentManager.js","../../src/Version.js","../../src/Entity.js","../../src/World.js","../../src/System.js","../../src/TagComponent.js","../../src/Types.js","../../src/RemoteDevTools/utils.js","../../src/RemoteDevTools/index.js"],"sourcesContent":["/**\n * Return the name of a component\n * @param {Component} Component\n * @private\n */\nexport function getName(Component) {\n  return Component.name;\n}\n\n/**\n * Return a valid property name for the Component\n * @param {Component} Component\n * @private\n */\nexport function componentPropertyName(Component) {\n  return getName(Component);\n}\n\n/**\n * Get a key from a list of components\n * @param {Array(Component)} Components Array of components to generate the key\n * @private\n */\nexport function queryKey(Components) {\n  var names = [];\n  for (var n = 0; n < Components.length; n++) {\n    var T = Components[n];\n    if (typeof T === \"object\") {\n      var operator = T.operator === \"not\" ? \"!\" : T.operator;\n      names.push(operator + getName(T.Component));\n    } else {\n      names.push(getName(T));\n    }\n  }\n\n  return names.sort().join(\"-\");\n}\n\n// Detector for browser's \"window\"\nexport const hasWindow = typeof window !== \"undefined\";\n\n// performance.now() \"polyfill\"\nexport const now =\n  hasWindow && typeof window.performance !== \"undefined\"\n    ? performance.now.bind(performance)\n    : Date.now.bind(Date);\n","import { now } from \"./Utils.js\";\n\nexport class SystemManager {\n  constructor(world) {\n    this._systems = [];\n    this._executeSystems = []; // Systems that have `execute` method\n    this.world = world;\n    this.lastExecutedSystem = null;\n  }\n\n  registerSystem(SystemClass, attributes) {\n    if (!SystemClass.isSystem) {\n      throw new Error(\n        `System '${SystemClass.name}' does not extend 'System' class`\n      );\n    }\n\n    if (this.getSystem(SystemClass) !== undefined) {\n      console.warn(`System '${SystemClass.getName()}' already registered.`);\n      return this;\n    }\n\n    var system = new SystemClass(this.world, attributes);\n    if (system.init) system.init(attributes);\n    system.order = this._systems.length;\n    this._systems.push(system);\n    if (system.execute) {\n      this._executeSystems.push(system);\n      this.sortSystems();\n    }\n    return this;\n  }\n\n  unregisterSystem(SystemClass) {\n    let system = this.getSystem(SystemClass);\n    if (system === undefined) {\n      console.warn(\n        `Can unregister system '${SystemClass.getName()}'. It doesn't exist.`\n      );\n      return this;\n    }\n\n    this._systems.splice(this._systems.indexOf(system), 1);\n\n    if (system.execute) {\n      this._executeSystems.splice(this._executeSystems.indexOf(system), 1);\n    }\n\n    // @todo Add system.unregister() call to free resources\n    return this;\n  }\n\n  sortSystems() {\n    this._executeSystems.sort((a, b) => {\n      return a.priority - b.priority || a.order - b.order;\n    });\n  }\n\n  getSystem(SystemClass) {\n    return this._systems.find(s => s instanceof SystemClass);\n  }\n\n  getSystems() {\n    return this._systems;\n  }\n\n  removeSystem(SystemClass) {\n    var index = this._systems.indexOf(SystemClass);\n    if (!~index) return;\n\n    this._systems.splice(index, 1);\n  }\n\n  executeSystem(system, delta, time) {\n    if (system.initialized) {\n      if (system.canExecute()) {\n        let startTime = now();\n        system.execute(delta, time);\n        system.executeTime = now() - startTime;\n        this.lastExecutedSystem = system;\n        system.clearEvents();\n      }\n    }\n  }\n\n  stop() {\n    this._executeSystems.forEach(system => system.stop());\n  }\n\n  execute(delta, time, forcePlay) {\n    this._executeSystems.forEach(\n      system =>\n        (forcePlay || system.enabled) && this.executeSystem(system, delta, time)\n    );\n  }\n\n  stats() {\n    var stats = {\n      numSystems: this._systems.length,\n      systems: {}\n    };\n\n    for (var i = 0; i < this._systems.length; i++) {\n      var system = this._systems[i];\n      var systemStats = (stats.systems[system.getName()] = {\n        queries: {},\n        executeTime: system.executeTime\n      });\n      for (var name in system.ctx) {\n        systemStats.queries[name] = system.ctx[name].stats();\n      }\n    }\n\n    return stats;\n  }\n}\n","export class ObjectPool {\n  // @todo Add initial size\n  constructor(T, initialSize) {\n    this.freeList = [];\n    this.count = 0;\n    this.T = T;\n    this.isObjectPool = true;\n\n    if (typeof initialSize !== \"undefined\") {\n      this.expand(initialSize);\n    }\n  }\n\n  acquire() {\n    // Grow the list by 20%ish if we're out\n    if (this.freeList.length <= 0) {\n      this.expand(Math.round(this.count * 0.2) + 1);\n    }\n\n    var item = this.freeList.pop();\n\n    return item;\n  }\n\n  release(item) {\n    item.reset();\n    this.freeList.push(item);\n  }\n\n  expand(count) {\n    for (var n = 0; n < count; n++) {\n      var clone = new this.T();\n      clone._pool = this;\n      this.freeList.push(clone);\n    }\n    this.count += count;\n  }\n\n  totalSize() {\n    return this.count;\n  }\n\n  totalFree() {\n    return this.freeList.length;\n  }\n\n  totalUsed() {\n    return this.count - this.freeList.length;\n  }\n}\n","/**\n * @private\n * @class EventDispatcher\n */\nexport default class EventDispatcher {\n  constructor() {\n    this._listeners = {};\n    this.stats = {\n      fired: 0,\n      handled: 0\n    };\n  }\n\n  /**\n   * Add an event listener\n   * @param {String} eventName Name of the event to listen\n   * @param {Function} listener Callback to trigger when the event is fired\n   */\n  addEventListener(eventName, listener) {\n    let listeners = this._listeners;\n    if (listeners[eventName] === undefined) {\n      listeners[eventName] = [];\n    }\n\n    if (listeners[eventName].indexOf(listener) === -1) {\n      listeners[eventName].push(listener);\n    }\n  }\n\n  /**\n   * Check if an event listener is already added to the list of listeners\n   * @param {String} eventName Name of the event to check\n   * @param {Function} listener Callback for the specified event\n   */\n  hasEventListener(eventName, listener) {\n    return (\n      this._listeners[eventName] !== undefined &&\n      this._listeners[eventName].indexOf(listener) !== -1\n    );\n  }\n\n  /**\n   * Remove an event listener\n   * @param {String} eventName Name of the event to remove\n   * @param {Function} listener Callback for the specified event\n   */\n  removeEventListener(eventName, listener) {\n    var listenerArray = this._listeners[eventName];\n    if (listenerArray !== undefined) {\n      var index = listenerArray.indexOf(listener);\n      if (index !== -1) {\n        listenerArray.splice(index, 1);\n      }\n    }\n  }\n\n  /**\n   * Dispatch an event\n   * @param {String} eventName Name of the event to dispatch\n   * @param {Entity} entity (Optional) Entity to emit\n   * @param {Component} component\n   */\n  dispatchEvent(eventName, entity, component) {\n    this.stats.fired++;\n\n    var listenerArray = this._listeners[eventName];\n    if (listenerArray !== undefined) {\n      var array = listenerArray.slice(0);\n\n      for (var i = 0; i < array.length; i++) {\n        array[i].call(this, entity, component);\n      }\n    }\n  }\n\n  /**\n   * Reset stats counters\n   */\n  resetCounters() {\n    this.stats.fired = this.stats.handled = 0;\n  }\n}\n","import EventDispatcher from \"./EventDispatcher.js\";\nimport { queryKey } from \"./Utils.js\";\n\nexport default class Query {\n  /**\n   * @param {Array(Component)} Components List of types of components to query\n   */\n  constructor(Components, manager) {\n    this.Components = [];\n    this.NotComponents = [];\n\n    Components.forEach(component => {\n      if (typeof component === \"object\") {\n        this.NotComponents.push(component.Component);\n      } else {\n        this.Components.push(component);\n      }\n    });\n\n    if (this.Components.length === 0) {\n      throw new Error(\"Can't create a query without components\");\n    }\n\n    this.entities = [];\n\n    this.eventDispatcher = new EventDispatcher();\n\n    // This query is being used by a reactive system\n    this.reactive = false;\n\n    this.key = queryKey(Components);\n\n    // Fill the query with the existing entities\n    for (var i = 0; i < manager._entities.length; i++) {\n      var entity = manager._entities[i];\n      if (this.match(entity)) {\n        // @todo ??? this.addEntity(entity); => preventing the event to be generated\n        entity.queries.push(this);\n        this.entities.push(entity);\n      }\n    }\n  }\n\n  /**\n   * Add entity to this query\n   * @param {Entity} entity\n   */\n  addEntity(entity) {\n    entity.queries.push(this);\n    this.entities.push(entity);\n\n    this.eventDispatcher.dispatchEvent(Query.prototype.ENTITY_ADDED, entity);\n  }\n\n  /**\n   * Remove entity from this query\n   * @param {Entity} entity\n   */\n  removeEntity(entity) {\n    let index = this.entities.indexOf(entity);\n    if (~index) {\n      this.entities.splice(index, 1);\n\n      index = entity.queries.indexOf(this);\n      entity.queries.splice(index, 1);\n\n      this.eventDispatcher.dispatchEvent(\n        Query.prototype.ENTITY_REMOVED,\n        entity\n      );\n    }\n  }\n\n  match(entity) {\n    return (\n      entity.hasAllComponents(this.Components) &&\n      !entity.hasAnyComponents(this.NotComponents)\n    );\n  }\n\n  toJSON() {\n    return {\n      key: this.key,\n      reactive: this.reactive,\n      components: {\n        included: this.Components.map(C => C.name),\n        not: this.NotComponents.map(C => C.name)\n      },\n      numEntities: this.entities.length\n    };\n  }\n\n  /**\n   * Return stats for this query\n   */\n  stats() {\n    return {\n      numComponents: this.Components.length,\n      numEntities: this.entities.length\n    };\n  }\n}\n\nQuery.prototype.ENTITY_ADDED = \"Query#ENTITY_ADDED\";\nQuery.prototype.ENTITY_REMOVED = \"Query#ENTITY_REMOVED\";\nQuery.prototype.COMPONENT_CHANGED = \"Query#COMPONENT_CHANGED\";\n","import Query from \"./Query.js\";\nimport { queryKey } from \"./Utils.js\";\n\n/**\n * @private\n * @class QueryManager\n */\nexport default class QueryManager {\n  constructor(world) {\n    this._world = world;\n\n    // Queries indexed by a unique identifier for the components it has\n    this._queries = {};\n  }\n\n  onEntityRemoved(entity) {\n    for (var queryName in this._queries) {\n      var query = this._queries[queryName];\n      if (entity.queries.indexOf(query) !== -1) {\n        query.removeEntity(entity);\n      }\n    }\n  }\n\n  /**\n   * Callback when a component is added to an entity\n   * @param {Entity} entity Entity that just got the new component\n   * @param {Component} Component Component added to the entity\n   */\n  onEntityComponentAdded(entity, Component) {\n    // @todo Use bitmask for checking components?\n\n    // Check each indexed query to see if we need to add this entity to the list\n    for (var queryName in this._queries) {\n      var query = this._queries[queryName];\n\n      if (\n        !!~query.NotComponents.indexOf(Component) &&\n        ~query.entities.indexOf(entity)\n      ) {\n        query.removeEntity(entity);\n        continue;\n      }\n\n      // Add the entity only if:\n      // Component is in the query\n      // and Entity has ALL the components of the query\n      // and Entity is not already in the query\n      if (\n        !~query.Components.indexOf(Component) ||\n        !query.match(entity) ||\n        ~query.entities.indexOf(entity)\n      )\n        continue;\n\n      query.addEntity(entity);\n    }\n  }\n\n  /**\n   * Callback when a component is removed from an entity\n   * @param {Entity} entity Entity to remove the component from\n   * @param {Component} Component Component to remove from the entity\n   */\n  onEntityComponentRemoved(entity, Component) {\n    for (var queryName in this._queries) {\n      var query = this._queries[queryName];\n\n      if (\n        !!~query.NotComponents.indexOf(Component) &&\n        !~query.entities.indexOf(entity) &&\n        query.match(entity)\n      ) {\n        query.addEntity(entity);\n        continue;\n      }\n\n      if (\n        !!~query.Components.indexOf(Component) &&\n        !!~query.entities.indexOf(entity) &&\n        !query.match(entity)\n      ) {\n        query.removeEntity(entity);\n        continue;\n      }\n    }\n  }\n\n  /**\n   * Get a query for the specified components\n   * @param {Component} Components Components that the query should have\n   */\n  getQuery(Components) {\n    var key = queryKey(Components);\n    var query = this._queries[key];\n    if (!query) {\n      this._queries[key] = query = new Query(Components, this._world);\n    }\n    return query;\n  }\n\n  /**\n   * Return some stats from this class\n   */\n  stats() {\n    var stats = {};\n    for (var queryName in this._queries) {\n      stats[queryName] = this._queries[queryName].stats();\n    }\n    return stats;\n  }\n}\n","export class Component {\n  constructor(props) {\n    if (props !== false) {\n      const schema = this.constructor.schema;\n\n      for (const key in schema) {\n        if (props && props.hasOwnProperty(key)) {\n          this[key] = props[key];\n        } else {\n          const schemaProp = schema[key];\n          if (schemaProp.hasOwnProperty(\"default\")) {\n            this[key] = schemaProp.type.clone(schemaProp.default);\n          } else {\n            const type = schemaProp.type;\n            this[key] = type.clone(type.default);\n          }\n        }\n      }\n    }\n\n    this._pool = null;\n  }\n\n  copy(source) {\n    const schema = this.constructor.schema;\n\n    for (const key in schema) {\n      const prop = schema[key];\n\n      if (source.hasOwnProperty(key)) {\n        this[key] = prop.type.copy(source[key], this[key]);\n      }\n    }\n\n    return this;\n  }\n\n  clone() {\n    return new this.constructor().copy(this);\n  }\n\n  reset() {\n    const schema = this.constructor.schema;\n\n    for (const key in schema) {\n      const schemaProp = schema[key];\n\n      if (schemaProp.hasOwnProperty(\"default\")) {\n        this[key] = schemaProp.type.copy(schemaProp.default, this[key]);\n      } else {\n        const type = schemaProp.type;\n        this[key] = type.copy(type.default, this[key]);\n      }\n    }\n  }\n\n  dispose() {\n    if (this._pool) {\n      this._pool.release(this);\n    }\n  }\n\n  getName() {\n    return this.constructor.getName();\n  }\n}\n\nComponent.schema = {};\nComponent.isComponent = true;\nComponent.getName = function() {\n  return this.displayName || this.name;\n};\n","import { Component } from \"./Component\";\n\nexport class SystemStateComponent extends Component {}\n\nSystemStateComponent.isSystemStateComponent = true;\n","import { ObjectPool } from \"./ObjectPool.js\";\nimport QueryManager from \"./QueryManager.js\";\nimport EventDispatcher from \"./EventDispatcher.js\";\nimport { SystemStateComponent } from \"./SystemStateComponent.js\";\n\nclass EntityPool extends ObjectPool {\n  constructor(entityManager, entityClass, initialSize) {\n    super(entityClass, undefined);\n    this.entityManager = entityManager;\n\n    if (typeof initialSize !== \"undefined\") {\n      this.expand(initialSize);\n    }\n  }\n\n  expand(count) {\n    for (var n = 0; n < count; n++) {\n      var clone = new this.T(this.entityManager);\n      clone._pool = this;\n      this.freeList.push(clone);\n    }\n    this.count += count;\n  }\n}\n\n/**\n * @private\n * @class EntityManager\n */\nexport class EntityManager {\n  constructor(world) {\n    this.world = world;\n    this.componentsManager = world.componentsManager;\n\n    // All the entities in this instance\n    this._entities = [];\n    this._nextEntityId = 0;\n\n    this._entitiesByNames = {};\n\n    this._queryManager = new QueryManager(this);\n    this.eventDispatcher = new EventDispatcher();\n    this._entityPool = new EntityPool(\n      this,\n      this.world.options.entityClass,\n      this.world.options.entityPoolSize\n    );\n\n    // Deferred deletion\n    this.entitiesWithComponentsToRemove = [];\n    this.entitiesToRemove = [];\n    this.deferredRemovalEnabled = true;\n  }\n\n  getEntityByName(name) {\n    return this._entitiesByNames[name];\n  }\n\n  /**\n   * Create a new entity\n   */\n  createEntity(name) {\n    var entity = this._entityPool.acquire();\n    entity.alive = true;\n    entity.name = name || \"\";\n    if (name) {\n      if (this._entitiesByNames[name]) {\n        console.warn(`Entity name '${name}' already exist`);\n      } else {\n        this._entitiesByNames[name] = entity;\n      }\n    }\n\n    this._entities.push(entity);\n    this.eventDispatcher.dispatchEvent(ENTITY_CREATED, entity);\n    return entity;\n  }\n\n  // COMPONENTS\n\n  /**\n   * Add a component to an entity\n   * @param {Entity} entity Entity where the component will be added\n   * @param {Component} Component Component to be added to the entity\n   * @param {Object} values Optional values to replace the default attributes\n   */\n  entityAddComponent(entity, Component, values) {\n    // @todo Probably define Component._typeId with a default value and avoid using typeof\n    if (\n      typeof Component._typeId === \"undefined\" &&\n      !this.world.componentsManager._ComponentsMap[Component._typeId]\n    ) {\n      throw new Error(\n        `Attempted to add unregistered component \"${Component.getName()}\"`\n      );\n    }\n\n    if (~entity._ComponentTypes.indexOf(Component)) {\n      // @todo Just on debug mode\n      console.warn(\n        \"Component type already exists on entity.\",\n        entity,\n        Component.getName()\n      );\n      return;\n    }\n\n    entity._ComponentTypes.push(Component);\n\n    if (Component.__proto__ === SystemStateComponent) {\n      entity.numStateComponents++;\n    }\n\n    var componentPool = this.world.componentsManager.getComponentsPool(\n      Component\n    );\n\n    var component = componentPool\n      ? componentPool.acquire()\n      : new Component(values);\n\n    if (componentPool && values) {\n      component.copy(values);\n    }\n\n    entity._components[Component._typeId] = component;\n\n    this._queryManager.onEntityComponentAdded(entity, Component);\n    this.world.componentsManager.componentAddedToEntity(Component);\n\n    this.eventDispatcher.dispatchEvent(COMPONENT_ADDED, entity, Component);\n  }\n\n  /**\n   * Remove a component from an entity\n   * @param {Entity} entity Entity which will get removed the component\n   * @param {*} Component Component to remove from the entity\n   * @param {Bool} immediately If you want to remove the component immediately instead of deferred (Default is false)\n   */\n  entityRemoveComponent(entity, Component, immediately) {\n    var index = entity._ComponentTypes.indexOf(Component);\n    if (!~index) return;\n\n    this.eventDispatcher.dispatchEvent(COMPONENT_REMOVE, entity, Component);\n\n    if (immediately) {\n      this._entityRemoveComponentSync(entity, Component, index);\n    } else {\n      if (entity._ComponentTypesToRemove.length === 0)\n        this.entitiesWithComponentsToRemove.push(entity);\n\n      entity._ComponentTypes.splice(index, 1);\n      entity._ComponentTypesToRemove.push(Component);\n\n      entity._componentsToRemove[Component._typeId] =\n        entity._components[Component._typeId];\n      delete entity._components[Component._typeId];\n    }\n\n    // Check each indexed query to see if we need to remove it\n    this._queryManager.onEntityComponentRemoved(entity, Component);\n\n    if (Component.__proto__ === SystemStateComponent) {\n      entity.numStateComponents--;\n\n      // Check if the entity was a ghost waiting for the last system state component to be removed\n      if (entity.numStateComponents === 0 && !entity.alive) {\n        entity.remove();\n      }\n    }\n  }\n\n  _entityRemoveComponentSync(entity, Component, index) {\n    // Remove T listing on entity and property ref, then free the component.\n    entity._ComponentTypes.splice(index, 1);\n    var component = entity._components[Component._typeId];\n    delete entity._components[Component._typeId];\n    component.dispose();\n    this.world.componentsManager.componentRemovedFromEntity(Component);\n  }\n\n  /**\n   * Remove all the components from an entity\n   * @param {Entity} entity Entity from which the components will be removed\n   */\n  entityRemoveAllComponents(entity, immediately) {\n    let Components = entity._ComponentTypes;\n\n    for (let j = Components.length - 1; j >= 0; j--) {\n      if (Components[j].__proto__ !== SystemStateComponent)\n        this.entityRemoveComponent(entity, Components[j], immediately);\n    }\n  }\n\n  /**\n   * Remove the entity from this manager. It will clear also its components\n   * @param {Entity} entity Entity to remove from the manager\n   * @param {Bool} immediately If you want to remove the component immediately instead of deferred (Default is false)\n   */\n  removeEntity(entity, immediately) {\n    var index = this._entities.indexOf(entity);\n\n    if (!~index) throw new Error(\"Tried to remove entity not in list\");\n\n    entity.alive = false;\n\n    if (entity.numStateComponents === 0) {\n      // Remove from entity list\n      this.eventDispatcher.dispatchEvent(ENTITY_REMOVED, entity);\n      this._queryManager.onEntityRemoved(entity);\n      if (immediately === true) {\n        this._releaseEntity(entity, index);\n      } else {\n        this.entitiesToRemove.push(entity);\n      }\n    }\n\n    this.entityRemoveAllComponents(entity, immediately);\n  }\n\n  _releaseEntity(entity, index) {\n    this._entities.splice(index, 1);\n\n    if (this._entitiesByNames[entity.name]) {\n      delete this._entitiesByNames[entity.name];\n    }\n    entity._pool.release(entity);\n  }\n\n  /**\n   * Remove all entities from this manager\n   */\n  removeAllEntities() {\n    for (var i = this._entities.length - 1; i >= 0; i--) {\n      this.removeEntity(this._entities[i]);\n    }\n  }\n\n  processDeferredRemoval() {\n    if (!this.deferredRemovalEnabled) {\n      return;\n    }\n\n    for (let i = 0; i < this.entitiesToRemove.length; i++) {\n      let entity = this.entitiesToRemove[i];\n      let index = this._entities.indexOf(entity);\n      this._releaseEntity(entity, index);\n    }\n    this.entitiesToRemove.length = 0;\n\n    for (let i = 0; i < this.entitiesWithComponentsToRemove.length; i++) {\n      let entity = this.entitiesWithComponentsToRemove[i];\n      while (entity._ComponentTypesToRemove.length > 0) {\n        let Component = entity._ComponentTypesToRemove.pop();\n\n        var component = entity._componentsToRemove[Component._typeId];\n        delete entity._componentsToRemove[Component._typeId];\n        component.dispose();\n        this.world.componentsManager.componentRemovedFromEntity(Component);\n\n        //this._entityRemoveComponentSync(entity, Component, index);\n      }\n    }\n\n    this.entitiesWithComponentsToRemove.length = 0;\n  }\n\n  /**\n   * Get a query based on a list of components\n   * @param {Array(Component)} Components List of components that will form the query\n   */\n  queryComponents(Components) {\n    return this._queryManager.getQuery(Components);\n  }\n\n  // EXTRAS\n\n  /**\n   * Return number of entities\n   */\n  count() {\n    return this._entities.length;\n  }\n\n  /**\n   * Return some stats\n   */\n  stats() {\n    var stats = {\n      numEntities: this._entities.length,\n      numQueries: Object.keys(this._queryManager._queries).length,\n      queries: this._queryManager.stats(),\n      numComponentPool: Object.keys(this.componentsManager._componentPool)\n        .length,\n      componentPool: {},\n      eventDispatcher: this.eventDispatcher.stats\n    };\n\n    for (var ecsyComponentId in this.componentsManager._componentPool) {\n      var pool = this.componentsManager._componentPool[ecsyComponentId];\n      stats.componentPool[ecsyComponentId] = {\n        used: pool.totalUsed(),\n        size: pool.count\n      };\n    }\n\n    return stats;\n  }\n}\n\nconst ENTITY_CREATED = \"EntityManager#ENTITY_CREATE\";\nconst ENTITY_REMOVED = \"EntityManager#ENTITY_REMOVED\";\nconst COMPONENT_ADDED = \"EntityManager#COMPONENT_ADDED\";\nconst COMPONENT_REMOVE = \"EntityManager#COMPONENT_REMOVE\";\n","import { ObjectPool } from \"./ObjectPool.js\";\n\nexport class ComponentManager {\n  constructor() {\n    this.Components = [];\n    this._ComponentsMap = {};\n\n    this._componentPool = {};\n    this.numComponents = {};\n    this.nextComponentId = 0;\n  }\n\n  registerComponent(Component, objectPool) {\n    if (this.Components.indexOf(Component) !== -1) {\n      console.warn(\n        `Component type: '${Component.getName()}' already registered.`\n      );\n      return;\n    }\n\n    const schema = Component.schema;\n\n    if (!schema) {\n      throw new Error(\n        `Component \"${Component.getName()}\" has no schema property.`\n      );\n    }\n\n    for (const propName in schema) {\n      const prop = schema[propName];\n\n      if (!prop.type) {\n        throw new Error(\n          `Invalid schema for component \"${Component.getName()}\". Missing type for \"${propName}\" property.`\n        );\n      }\n    }\n\n    Component._typeId = this.nextComponentId++;\n    this.Components.push(Component);\n    this._ComponentsMap[Component._typeId] = Component;\n    this.numComponents[Component._typeId] = 0;\n\n    if (objectPool === undefined) {\n      objectPool = new ObjectPool(Component);\n    } else if (objectPool === false) {\n      objectPool = undefined;\n    }\n\n    this._componentPool[Component._typeId] = objectPool;\n  }\n\n  componentAddedToEntity(Component) {\n    this.numComponents[Component._typeId]++;\n  }\n\n  componentRemovedFromEntity(Component) {\n    this.numComponents[Component._typeId]--;\n  }\n\n  getComponentsPool(Component) {\n    return this._componentPool[Component._typeId];\n  }\n}\n","export const Version = \"0.3.1\";\n","import Query from \"./Query.js\";\nimport wrapImmutableComponent from \"./WrapImmutableComponent.js\";\n\n// @todo Take this out from there or use ENV\nconst DEBUG = false;\n\nexport class Entity {\n  constructor(entityManager) {\n    this._entityManager = entityManager || null;\n\n    // Unique ID for this entity\n    this.id = entityManager._nextEntityId++;\n\n    // List of components types the entity has\n    this._ComponentTypes = [];\n\n    // Instance of the components\n    this._components = {};\n\n    this._componentsToRemove = {};\n\n    // Queries where the entity is added\n    this.queries = [];\n\n    // Used for deferred removal\n    this._ComponentTypesToRemove = [];\n\n    this.alive = false;\n\n    //if there are state components on a entity, it can't be removed completely\n    this.numStateComponents = 0;\n  }\n\n  // COMPONENTS\n\n  getComponent(Component, includeRemoved) {\n    var component = this._components[Component._typeId];\n\n    if (!component && includeRemoved === true) {\n      component = this._componentsToRemove[Component._typeId];\n    }\n\n    return DEBUG ? wrapImmutableComponent(Component, component) : component;\n  }\n\n  getRemovedComponent(Component) {\n    return this._componentsToRemove[Component._typeId];\n  }\n\n  getComponents() {\n    return this._components;\n  }\n\n  getComponentsToRemove() {\n    return this._componentsToRemove;\n  }\n\n  getComponentTypes() {\n    return this._ComponentTypes;\n  }\n\n  getMutableComponent(Component) {\n    var component = this._components[Component._typeId];\n    for (var i = 0; i < this.queries.length; i++) {\n      var query = this.queries[i];\n      // @todo accelerate this check. Maybe having query._Components as an object\n      // @todo add Not components\n      if (query.reactive && query.Components.indexOf(Component) !== -1) {\n        query.eventDispatcher.dispatchEvent(\n          Query.prototype.COMPONENT_CHANGED,\n          this,\n          component\n        );\n      }\n    }\n    return component;\n  }\n\n  addComponent(Component, values) {\n    this._entityManager.entityAddComponent(this, Component, values);\n    return this;\n  }\n\n  removeComponent(Component, forceImmediate) {\n    this._entityManager.entityRemoveComponent(this, Component, forceImmediate);\n    return this;\n  }\n\n  hasComponent(Component, includeRemoved) {\n    return (\n      !!~this._ComponentTypes.indexOf(Component) ||\n      (includeRemoved === true && this.hasRemovedComponent(Component))\n    );\n  }\n\n  hasRemovedComponent(Component) {\n    return !!~this._ComponentTypesToRemove.indexOf(Component);\n  }\n\n  hasAllComponents(Components) {\n    for (var i = 0; i < Components.length; i++) {\n      if (!this.hasComponent(Components[i])) return false;\n    }\n    return true;\n  }\n\n  hasAnyComponents(Components) {\n    for (var i = 0; i < Components.length; i++) {\n      if (this.hasComponent(Components[i])) return true;\n    }\n    return false;\n  }\n\n  removeAllComponents(forceImmediate) {\n    return this._entityManager.entityRemoveAllComponents(this, forceImmediate);\n  }\n\n  copy(src) {\n    // TODO: This can definitely be optimized\n    for (var ecsyComponentId in src._components) {\n      var srcComponent = src._components[ecsyComponentId];\n      this.addComponent(srcComponent.constructor);\n      var component = this.getComponent(srcComponent.constructor);\n      component.copy(srcComponent);\n    }\n\n    return this;\n  }\n\n  clone() {\n    return new Entity(this._entityManager).copy(this);\n  }\n\n  reset() {\n    this.id = this._entityManager._nextEntityId++;\n    this._ComponentTypes.length = 0;\n    this.queries.length = 0;\n\n    for (var ecsyComponentId in this._components) {\n      delete this._components[ecsyComponentId];\n    }\n  }\n\n  remove(forceImmediate) {\n    return this._entityManager.removeEntity(this, forceImmediate);\n  }\n}\n","import { SystemManager } from \"./SystemManager.js\";\nimport { EntityManager } from \"./EntityManager.js\";\nimport { ComponentManager } from \"./ComponentManager.js\";\nimport { Version } from \"./Version.js\";\nimport { hasWindow, now } from \"./Utils.js\";\nimport { Entity } from \"./Entity.js\";\n\nconst DEFAULT_OPTIONS = {\n  entityPoolSize: 0,\n  entityClass: Entity\n};\n\nexport class World {\n  constructor(options = {}) {\n    this.options = Object.assign({}, DEFAULT_OPTIONS, options);\n\n    this.componentsManager = new ComponentManager(this);\n    this.entityManager = new EntityManager(this);\n    this.systemManager = new SystemManager(this);\n\n    this.enabled = true;\n\n    this.eventQueues = {};\n\n    if (hasWindow && typeof CustomEvent !== \"undefined\") {\n      var event = new CustomEvent(\"ecsy-world-created\", {\n        detail: { world: this, version: Version }\n      });\n      window.dispatchEvent(event);\n    }\n\n    this.lastTime = now();\n  }\n\n  registerComponent(Component, objectPool) {\n    this.componentsManager.registerComponent(Component, objectPool);\n    return this;\n  }\n\n  registerSystem(System, attributes) {\n    this.systemManager.registerSystem(System, attributes);\n    return this;\n  }\n\n  unregisterSystem(System) {\n    this.systemManager.unregisterSystem(System);\n    return this;\n  }\n\n  getSystem(SystemClass) {\n    return this.systemManager.getSystem(SystemClass);\n  }\n\n  getSystems() {\n    return this.systemManager.getSystems();\n  }\n\n  execute(delta, time) {\n    if (!delta) {\n      time = now();\n      delta = time - this.lastTime;\n      this.lastTime = time;\n    }\n\n    if (this.enabled) {\n      this.systemManager.execute(delta, time);\n      this.entityManager.processDeferredRemoval();\n    }\n  }\n\n  stop() {\n    this.enabled = false;\n  }\n\n  play() {\n    this.enabled = true;\n  }\n\n  createEntity(name) {\n    return this.entityManager.createEntity(name);\n  }\n\n  stats() {\n    var stats = {\n      entities: this.entityManager.stats(),\n      system: this.systemManager.stats()\n    };\n\n    console.log(JSON.stringify(stats, null, 2));\n  }\n}\n","import Query from \"./Query.js\";\n\nexport class System {\n  canExecute() {\n    if (this._mandatoryQueries.length === 0) return true;\n\n    for (let i = 0; i < this._mandatoryQueries.length; i++) {\n      var query = this._mandatoryQueries[i];\n      if (query.entities.length === 0) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  getName() {\n    return this.constructor.getName();\n  }\n\n  constructor(world, attributes) {\n    this.world = world;\n    this.enabled = true;\n\n    // @todo Better naming :)\n    this._queries = {};\n    this.queries = {};\n\n    this.priority = 0;\n\n    // Used for stats\n    this.executeTime = 0;\n\n    if (attributes && attributes.priority) {\n      this.priority = attributes.priority;\n    }\n\n    this._mandatoryQueries = [];\n\n    this.initialized = true;\n\n    if (this.constructor.queries) {\n      for (var queryName in this.constructor.queries) {\n        var queryConfig = this.constructor.queries[queryName];\n        var Components = queryConfig.components;\n        if (!Components || Components.length === 0) {\n          throw new Error(\"'components' attribute can't be empty in a query\");\n        }\n        var query = this.world.entityManager.queryComponents(Components);\n        this._queries[queryName] = query;\n        if (queryConfig.mandatory === true) {\n          this._mandatoryQueries.push(query);\n        }\n        this.queries[queryName] = {\n          results: query.entities\n        };\n\n        // Reactive configuration added/removed/changed\n        var validEvents = [\"added\", \"removed\", \"changed\"];\n\n        const eventMapping = {\n          added: Query.prototype.ENTITY_ADDED,\n          removed: Query.prototype.ENTITY_REMOVED,\n          changed: Query.prototype.COMPONENT_CHANGED // Query.prototype.ENTITY_CHANGED\n        };\n\n        if (queryConfig.listen) {\n          validEvents.forEach(eventName => {\n            if (!this.execute) {\n              console.warn(\n                `System '${this.getName()}' has defined listen events (${validEvents.join(\n                  \", \"\n                )}) for query '${queryName}' but it does not implement the 'execute' method.`\n              );\n            }\n\n            // Is the event enabled on this system's query?\n            if (queryConfig.listen[eventName]) {\n              let event = queryConfig.listen[eventName];\n\n              if (eventName === \"changed\") {\n                query.reactive = true;\n                if (event === true) {\n                  // Any change on the entity from the components in the query\n                  let eventList = (this.queries[queryName][eventName] = []);\n                  query.eventDispatcher.addEventListener(\n                    Query.prototype.COMPONENT_CHANGED,\n                    entity => {\n                      // Avoid duplicates\n                      if (eventList.indexOf(entity) === -1) {\n                        eventList.push(entity);\n                      }\n                    }\n                  );\n                } else if (Array.isArray(event)) {\n                  let eventList = (this.queries[queryName][eventName] = []);\n                  query.eventDispatcher.addEventListener(\n                    Query.prototype.COMPONENT_CHANGED,\n                    (entity, changedComponent) => {\n                      // Avoid duplicates\n                      if (\n                        event.indexOf(changedComponent.constructor) !== -1 &&\n                        eventList.indexOf(entity) === -1\n                      ) {\n                        eventList.push(entity);\n                      }\n                    }\n                  );\n                } else {\n                  /*\n                  // Checking just specific components\n                  let changedList = (this.queries[queryName][eventName] = {});\n                  event.forEach(component => {\n                    let eventList = (changedList[\n                      componentPropertyName(component)\n                    ] = []);\n                    query.eventDispatcher.addEventListener(\n                      Query.prototype.COMPONENT_CHANGED,\n                      (entity, changedComponent) => {\n                        if (\n                          changedComponent.constructor === component &&\n                          eventList.indexOf(entity) === -1\n                        ) {\n                          eventList.push(entity);\n                        }\n                      }\n                    );\n                  });\n                  */\n                }\n              } else {\n                let eventList = (this.queries[queryName][eventName] = []);\n\n                query.eventDispatcher.addEventListener(\n                  eventMapping[eventName],\n                  entity => {\n                    // @fixme overhead?\n                    if (eventList.indexOf(entity) === -1)\n                      eventList.push(entity);\n                  }\n                );\n              }\n            }\n          });\n        }\n      }\n    }\n  }\n\n  stop() {\n    this.executeTime = 0;\n    this.enabled = false;\n  }\n\n  play() {\n    this.enabled = true;\n  }\n\n  // @question rename to clear queues?\n  clearEvents() {\n    for (let queryName in this.queries) {\n      var query = this.queries[queryName];\n      if (query.added) {\n        query.added.length = 0;\n      }\n      if (query.removed) {\n        query.removed.length = 0;\n      }\n      if (query.changed) {\n        if (Array.isArray(query.changed)) {\n          query.changed.length = 0;\n        } else {\n          for (let name in query.changed) {\n            query.changed[name].length = 0;\n          }\n        }\n      }\n    }\n  }\n\n  toJSON() {\n    var json = {\n      name: this.getName(),\n      enabled: this.enabled,\n      executeTime: this.executeTime,\n      priority: this.priority,\n      queries: {}\n    };\n\n    if (this.constructor.queries) {\n      var queries = this.constructor.queries;\n      for (let queryName in queries) {\n        let query = this.queries[queryName];\n        let queryDefinition = queries[queryName];\n        let jsonQuery = (json.queries[queryName] = {\n          key: this._queries[queryName].key\n        });\n\n        jsonQuery.mandatory = queryDefinition.mandatory === true;\n        jsonQuery.reactive =\n          queryDefinition.listen &&\n          (queryDefinition.listen.added === true ||\n            queryDefinition.listen.removed === true ||\n            queryDefinition.listen.changed === true ||\n            Array.isArray(queryDefinition.listen.changed));\n\n        if (jsonQuery.reactive) {\n          jsonQuery.listen = {};\n\n          const methods = [\"added\", \"removed\", \"changed\"];\n          methods.forEach(method => {\n            if (query[method]) {\n              jsonQuery.listen[method] = {\n                entities: query[method].length\n              };\n            }\n          });\n        }\n      }\n    }\n\n    return json;\n  }\n}\n\nSystem.isSystem = true;\nSystem.getName = function() {\n  return this.displayName || this.name;\n};\n\nexport function Not(Component) {\n  return {\n    operator: \"not\",\n    Component: Component\n  };\n}\n","import { Component } from \"./Component\";\n\nexport class TagComponent extends Component {\n  constructor() {\n    super(false);\n  }\n}\n\nTagComponent.isTagComponent = true;\n","export const copyValue = src => src;\n\nexport const cloneValue = src => src;\n\nexport const copyArray = (src, dest) => {\n  if (!src) {\n    return src;\n  }\n\n  if (!dest) {\n    return src.slice();\n  }\n\n  dest.length = 0;\n\n  for (let i = 0; i < src.length; i++) {\n    dest.push(src[i]);\n  }\n\n  return dest;\n};\n\nexport const cloneArray = src => src && src.slice();\n\nexport const copyJSON = src => JSON.parse(JSON.stringify(src));\n\nexport const cloneJSON = src => JSON.parse(JSON.stringify(src));\n\nexport const copyCopyable = (src, dest) => {\n  if (!src) {\n    return src;\n  }\n\n  if (!dest) {\n    return src.clone();\n  }\n\n  return dest.copy(src);\n};\n\nexport const cloneClonable = src => src && src.clone();\n\nexport function createType(typeDefinition) {\n  var mandatoryProperties = [\"name\", \"default\", \"copy\", \"clone\"];\n\n  var undefinedProperties = mandatoryProperties.filter(p => {\n    return !typeDefinition.hasOwnProperty(p);\n  });\n\n  if (undefinedProperties.length > 0) {\n    throw new Error(\n      `createType expects a type definition with the following properties: ${undefinedProperties.join(\n        \", \"\n      )}`\n    );\n  }\n\n  typeDefinition.isType = true;\n\n  return typeDefinition;\n}\n\n/**\n * Standard types\n */\nexport const Types = {\n  Number: createType({\n    name: \"Number\",\n    default: 0,\n    copy: copyValue,\n    clone: cloneValue\n  }),\n\n  Boolean: createType({\n    name: \"Boolean\",\n    default: false,\n    copy: copyValue,\n    clone: cloneValue\n  }),\n\n  String: createType({\n    name: \"String\",\n    default: \"\",\n    copy: copyValue,\n    clone: cloneValue\n  }),\n\n  Array: createType({\n    name: \"Array\",\n    default: [],\n    copy: copyArray,\n    clone: cloneArray\n  }),\n\n  Ref: createType({\n    name: \"Ref\",\n    default: undefined,\n    copy: copyValue,\n    clone: cloneValue\n  }),\n\n  JSON: createType({\n    name: \"JSON\",\n    default: null,\n    copy: copyJSON,\n    clone: cloneJSON\n  })\n};\n","export function generateId(length) {\n  var result = \"\";\n  var characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n  var charactersLength = characters.length;\n  for (var i = 0; i < length; i++) {\n    result += characters.charAt(Math.floor(Math.random() * charactersLength));\n  }\n  return result;\n}\n\nexport function injectScript(src, onLoad) {\n  var script = document.createElement(\"script\");\n  // @todo Use link to the ecsy-devtools repo?\n  script.src = src;\n  script.onload = onLoad;\n  (document.head || document.documentElement).appendChild(script);\n}\n","/* global Peer */\nimport { injectScript, generateId } from \"./utils.js\";\nimport { hasWindow } from \"../Utils.js\";\n\nfunction hookConsoleAndErrors(connection) {\n  var wrapFunctions = [\"error\", \"warning\", \"log\"];\n  wrapFunctions.forEach(key => {\n    if (typeof console[key] === \"function\") {\n      var fn = console[key].bind(console);\n      console[key] = (...args) => {\n        connection.send({\n          method: \"console\",\n          type: key,\n          args: JSON.stringify(args)\n        });\n        return fn.apply(null, args);\n      };\n    }\n  });\n\n  window.addEventListener(\"error\", error => {\n    connection.send({\n      method: \"error\",\n      error: JSON.stringify({\n        message: error.error.message,\n        stack: error.error.stack\n      })\n    });\n  });\n}\n\nfunction includeRemoteIdHTML(remoteId) {\n  let infoDiv = document.createElement(\"div\");\n  infoDiv.style.cssText = `\n    align-items: center;\n    background-color: #333;\n    color: #aaa;\n    display:flex;\n    font-family: Arial;\n    font-size: 1.1em;\n    height: 40px;\n    justify-content: center;\n    left: 0;\n    opacity: 0.9;\n    position: absolute;\n    right: 0;\n    text-align: center;\n    top: 0;\n  `;\n\n  infoDiv.innerHTML = `Open ECSY devtools to connect to this page using the code:&nbsp;<b style=\"color: #fff\">${remoteId}</b>&nbsp;<button onClick=\"generateNewCode()\">Generate new code</button>`;\n  document.body.appendChild(infoDiv);\n\n  return infoDiv;\n}\n\nexport function enableRemoteDevtools(remoteId) {\n  if (!hasWindow) {\n    console.warn(\"Remote devtools not available outside the browser\");\n    return;\n  }\n\n  window.generateNewCode = () => {\n    window.localStorage.clear();\n    remoteId = generateId(6);\n    window.localStorage.setItem(\"ecsyRemoteId\", remoteId);\n    window.location.reload(false);\n  };\n\n  remoteId = remoteId || window.localStorage.getItem(\"ecsyRemoteId\");\n  if (!remoteId) {\n    remoteId = generateId(6);\n    window.localStorage.setItem(\"ecsyRemoteId\", remoteId);\n  }\n\n  let infoDiv = includeRemoteIdHTML(remoteId);\n\n  window.__ECSY_REMOTE_DEVTOOLS_INJECTED = true;\n  window.__ECSY_REMOTE_DEVTOOLS = {};\n\n  let Version = \"\";\n\n  // This is used to collect the worlds created before the communication is being established\n  let worldsBeforeLoading = [];\n  let onWorldCreated = e => {\n    var world = e.detail.world;\n    Version = e.detail.version;\n    worldsBeforeLoading.push(world);\n  };\n  window.addEventListener(\"ecsy-world-created\", onWorldCreated);\n\n  let onLoaded = () => {\n    var peer = new Peer(remoteId);\n    peer.on(\"open\", (/* id */) => {\n      peer.on(\"connection\", connection => {\n        window.__ECSY_REMOTE_DEVTOOLS.connection = connection;\n        connection.on(\"open\", function() {\n          // infoDiv.style.visibility = \"hidden\";\n          infoDiv.innerHTML = \"Connected\";\n\n          // Receive messages\n          connection.on(\"data\", function(data) {\n            if (data.type === \"init\") {\n              var script = document.createElement(\"script\");\n              script.setAttribute(\"type\", \"text/javascript\");\n              script.onload = () => {\n                script.parentNode.removeChild(script);\n\n                // Once the script is injected we don't need to listen\n                window.removeEventListener(\n                  \"ecsy-world-created\",\n                  onWorldCreated\n                );\n                worldsBeforeLoading.forEach(world => {\n                  var event = new CustomEvent(\"ecsy-world-created\", {\n                    detail: { world: world, version: Version }\n                  });\n                  window.dispatchEvent(event);\n                });\n              };\n              script.innerHTML = data.script;\n              (document.head || document.documentElement).appendChild(script);\n              script.onload();\n\n              hookConsoleAndErrors(connection);\n            } else if (data.type === \"executeScript\") {\n              let value = eval(data.script);\n              if (data.returnEval) {\n                connection.send({\n                  method: \"evalReturn\",\n                  value: value\n                });\n              }\n            }\n          });\n        });\n      });\n    });\n  };\n\n  // Inject PeerJS script\n  injectScript(\n    \"https://cdn.jsdelivr.net/npm/peerjs@0.3.20/dist/peer.min.js\",\n    onLoaded\n  );\n}\n\nif (hasWindow) {\n  const urlParams = new URLSearchParams(window.location.search);\n\n  // @todo Provide a way to disable it if needed\n  if (urlParams.has(\"enable-remote-devtools\")) {\n    enableRemoteDevtools();\n  }\n}\n"],"names":["getName","Component","name","queryKey","Components","names","n","length","T","operator","push","sort","join","hasWindow","window","now","performance","bind","Date","SystemManager","[object Object]","world","this","_systems","_executeSystems","lastExecutedSystem","SystemClass","attributes","isSystem","Error","undefined","getSystem","console","warn","system","init","order","execute","sortSystems","splice","indexOf","a","b","priority","find","s","index","delta","time","initialized","canExecute","startTime","executeTime","clearEvents","forEach","stop","forcePlay","enabled","executeSystem","stats","numSystems","systems","i","systemStats","queries","ctx","ObjectPool","initialSize","freeList","count","isObjectPool","expand","Math","round","pop","item","reset","clone","_pool","EventDispatcher","_listeners","fired","handled","eventName","listener","listeners","listenerArray","entity","component","array","slice","call","Query","manager","NotComponents","entities","eventDispatcher","reactive","key","_entities","match","dispatchEvent","prototype","ENTITY_ADDED","ENTITY_REMOVED","hasAllComponents","hasAnyComponents","components","included","map","C","not","numEntities","numComponents","COMPONENT_CHANGED","QueryManager","_world","_queries","queryName","query","removeEntity","addEntity","props","schema","constructor","hasOwnProperty","schemaProp","type","default","source","prop","copy","release","isComponent","displayName","SystemStateComponent","isSystemStateComponent","EntityPool","entityManager","entityClass","super","EntityManager","componentsManager","_nextEntityId","_entitiesByNames","_queryManager","_entityPool","options","entityPoolSize","entitiesWithComponentsToRemove","entitiesToRemove","deferredRemovalEnabled","acquire","alive","ENTITY_CREATED","values","_typeId","_ComponentsMap","_ComponentTypes","__proto__","numStateComponents","componentPool","getComponentsPool","_components","onEntityComponentAdded","componentAddedToEntity","COMPONENT_ADDED","immediately","COMPONENT_REMOVE","_entityRemoveComponentSync","_ComponentTypesToRemove","_componentsToRemove","onEntityComponentRemoved","remove","dispose","componentRemovedFromEntity","j","entityRemoveComponent","onEntityRemoved","_releaseEntity","entityRemoveAllComponents","getQuery","numQueries","Object","keys","numComponentPool","_componentPool","ecsyComponentId","pool","used","totalUsed","size","ComponentManager","nextComponentId","objectPool","propName","Version","Entity","_entityManager","id","includeRemoved","entityAddComponent","forceImmediate","hasRemovedComponent","hasComponent","src","srcComponent","addComponent","getComponent","DEFAULT_OPTIONS","World","assign","systemManager","eventQueues","CustomEvent","event","detail","version","lastTime","registerComponent","System","registerSystem","unregisterSystem","getSystems","processDeferredRemoval","createEntity","log","JSON","stringify","_mandatoryQueries","queryConfig","queryComponents","mandatory","results","validEvents","eventMapping","added","removed","changed","listen","eventList","addEventListener","Array","isArray","changedComponent","json","queryDefinition","jsonQuery","method","Not","TagComponent","isTagComponent","copyValue","cloneValue","copyArray","dest","cloneArray","copyJSON","parse","cloneJSON","copyCopyable","cloneClonable","createType","typeDefinition","undefinedProperties","filter","p","isType","Types","Number","Boolean","String","Ref","generateId","result","characters","charactersLength","charAt","floor","random","injectScript","onLoad","script","document","createElement","onload","head","documentElement","appendChild","hookConsoleAndErrors","connection","fn","args","send","apply","error","message","stack","includeRemoteIdHTML","remoteId","infoDiv","style","cssText","innerHTML","body","enableRemoteDevtools","generateNewCode","localStorage","clear","setItem","location","reload","getItem","__ECSY_REMOTE_DEVTOOLS_INJECTED","__ECSY_REMOTE_DEVTOOLS","worldsBeforeLoading","onWorldCreated","e","onLoaded","peer","Peer","on","data","setAttribute","parentNode","removeChild","removeEventListener","value","eval","returnEval","urlParams","URLSearchParams","search","has"],"mappings":"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"}