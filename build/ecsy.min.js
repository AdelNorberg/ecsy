!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):(e=e||self,function(){var o=e.ECSY,n=e.ECSY={};t(n),n.noConflict=function(){return e.ECSY=o,n}}())}(this,(function(exports){"use strict";class SystemManager{constructor(e){this._systems=[],this._executeSystems=[],this.world=e,this.lastExecutedSystem=null}registerSystem(e,t){if(void 0!==this._systems.find(t=>t.constructor.name===e.name))return console.warn(`System '${e.name}' already registered.`),this;var o=new e(this.world,t);return o.init&&o.init(),o.order=this._systems.length,this._systems.push(o),o.execute&&(this._executeSystems.push(o),this.sortSystems()),this}sortSystems(){this._executeSystems.sort((e,t)=>e.priority-t.priority||e.order-t.order)}getSystem(e){return this._systems.find(t=>t instanceof e)}getSystems(){return this._systems}removeSystem(e){var t=this._systems.indexOf(e);~t&&this._systems.splice(t,1)}executeSystem(e,t,o){if(e.initialized&&e.canExecute()){let n=performance.now();e.execute(t,o),e.executeTime=performance.now()-n,this.lastExecutedSystem=e,e.clearEvents()}}stop(){this._executeSystems.forEach(e=>e.stop())}execute(e,t,o){this._executeSystems.forEach(n=>(o||n.enabled)&&this.executeSystem(n,e,t))}stats(){for(var e={numSystems:this._systems.length,systems:{}},t=0;t<this._systems.length;t++){var o=this._systems[t],n=e.systems[o.constructor.name]={queries:{}};for(var s in o.ctx)n.queries[s]=o.ctx[s].stats()}return e}}const Version="0.2.2";class EventDispatcher{constructor(){this._listeners={},this.stats={fired:0,handled:0}}addEventListener(e,t){let o=this._listeners;void 0===o[e]&&(o[e]=[]),-1===o[e].indexOf(t)&&o[e].push(t)}hasEventListener(e,t){return void 0!==this._listeners[e]&&-1!==this._listeners[e].indexOf(t)}removeEventListener(e,t){var o=this._listeners[e];if(void 0!==o){var n=o.indexOf(t);-1!==n&&o.splice(n,1)}}dispatchEvent(e,t,o){this.stats.fired++;var n=this._listeners[e];if(void 0!==n)for(var s=n.slice(0),i=0;i<s.length;i++)s[i].call(this,t,o)}resetCounters(){this.stats.fired=this.stats.handled=0}}function queryKey(e){for(var t=[],o=0;o<e.length;o++){var n=e[o];if("object"==typeof n){var s="not"===n.operator?"!":n.operator;t.push(s+n.Component.name)}else t.push(n.name)}return t.sort().join("-")}let _lut=[];for(let e=0;e<256;e++)_lut[e]=(e<16?"0":"")+e.toString(16);function generateUUID(){let e=4294967295*Math.random()|0,t=4294967295*Math.random()|0,o=4294967295*Math.random()|0,n=4294967295*Math.random()|0;return(_lut[255&e]+_lut[e>>8&255]+_lut[e>>16&255]+_lut[e>>24&255]+"-"+_lut[255&t]+_lut[t>>8&255]+"-"+_lut[t>>16&15|64]+_lut[t>>24&255]+"-"+_lut[63&o|128]+_lut[o>>8&255]+"-"+_lut[o>>16&255]+_lut[o>>24&255]+_lut[255&n]+_lut[n>>8&255]+_lut[n>>16&255]+_lut[n>>24&255]).toUpperCase()}class Query{constructor(e,t){if(this.Components=[],this.NotComponents=[],e.forEach(e=>{"object"==typeof e?this.NotComponents.push(e.Component):this.Components.push(e)}),0===this.Components.length)throw new Error("Can't create a query without components");this.entities=[],this.eventDispatcher=new EventDispatcher,this.reactive=!1,this.key=queryKey(e);for(var o=0;o<t.entities.length;o++){var n=t.entities[o];this.match(n)&&(n.queries.push(this),this.entities.push(n))}}addEntity(e){e.queries.push(this),this.entities.push(e),this.eventDispatcher.dispatchEvent(Query.prototype.ENTITY_ADDED,e)}removeEntity(e){let t=this.entities.indexOf(e);~t&&(this.entities.splice(t,1),t=e.queries.indexOf(this),e.queries.splice(t,1),this.eventDispatcher.dispatchEvent(Query.prototype.ENTITY_REMOVED,e))}match(e){return e.hasAllComponents(this.Components)&&!e.hasAnyComponents(this.NotComponents)}toJSON(){return{key:this.key,reactive:this.reactive,components:{included:this.Components.map(e=>e.name),not:this.NotComponents.map(e=>e.name)},numEntities:this.entities.length}}stats(){return{numComponents:this.Components.length,numEntities:this.entities.length}}}Query.prototype.ENTITY_ADDED="Query#ENTITY_ADDED",Query.prototype.ENTITY_REMOVED="Query#ENTITY_REMOVED",Query.prototype.COMPONENT_CHANGED="Query#COMPONENT_CHANGED";const proxyMap=new WeakMap,proxyHandler={set(e,t){throw new Error(`Tried to write to "${e.constructor.name}#${String(t)}" on immutable component. Use .getMutableComponent() to modify a component.`)}};function wrapImmutableComponent(e,t){if(void 0===t)return;let o=proxyMap.get(t);return o||(o=new Proxy(t,proxyHandler),proxyMap.set(t,o)),o}class Entity{constructor(e){this.world=e,this.uuid=generateUUID(),this.componentTypes=[],this.components={},this._componentsToRemove={},this.queries=[],this._componentTypesToRemove=[],this.alive=!1,this._numSystemStateComponents=0}getComponent(e,t){var o=this.components[e.name];return o||!0!==t||(o=this._componentsToRemove[e.name]),o}getRemovedComponent(e){return this._componentsToRemove[e.name]}getComponents(){return this.components}getComponentsToRemove(){return this._componentsToRemove}getComponentTypes(){return this.componentTypes}getMutableComponent(e){var t=this.components[e.name];if(this.alive)for(var o=0;o<this.queries.length;o++){var n=this.queries[o];n.reactive&&-1!==n.Components.indexOf(e)&&n.eventDispatcher.dispatchEvent(Query.prototype.COMPONENT_CHANGED,this,t)}return t}addComponent(e,t){if(!~this.componentTypes.indexOf(e)){this.componentTypes.push(e),e.isSystemStateComponent&&this._numSystemStateComponents++;var o=this.world.getComponentPool(e),n=void 0===o?new e(t):o.acquire();return o&&t&&n.copy(t),this.components[e.name]=n,this.alive&&this.world.onComponentAdded(this,e),this}}hasComponent(e,t){return!!~this.componentTypes.indexOf(e)||!0===t&&this.hasRemovedComponent(e)}hasRemovedComponent(e){return!!~this._componentTypesToRemove.indexOf(e)}hasAllComponents(e){for(var t=0;t<e.length;t++)if(!this.hasComponent(e[t]))return!1;return!0}hasAnyComponents(e){for(var t=0;t<e.length;t++)if(this.hasComponent(e[t]))return!0;return!1}removeComponent(e,t){const o=e.name;if(!this._componentsToRemove[o]){delete this.components[o];const t=this.componentTypes.indexOf(e);this.componentTypes.splice(t,1),this.alive&&this.world.onRemoveComponent(this,e)}const n=this.components[o];if(t){if(n&&n.dispose(),this._componentsToRemove[o]){delete this._componentsToRemove[o];const t=this._componentTypesToRemove.indexOf(e);-1!==t&&this._componentTypesToRemove.splice(t,1)}}else this.alive&&(this._componentTypesToRemove.push(e),this._componentsToRemove[o]=n,this.world.queueComponentRemoval(this,e));return e.isSystemStateComponent&&(this._numSystemStateComponents--,0!==this._numSystemStateComponents||this.alive||this.dispose()),!0}processRemovedComponents(){for(;this._componentTypesToRemove.length>0;){let e=this._componentTypesToRemove.pop();this.removeComponent(e,!0)}}removeAllComponents(e){let t=this.componentTypes;for(let o=t.length-1;o>=0;o--)this.removeComponent(t[o],e)}copy(e){for(const t in e.components){const o=e.components[t];this.components[t]=o.clone(),this.componentTypes.push(o.constructor)}return this}clone(){return new this.constructor(this.world).copy(this)}dispose(e){if(this.alive&&this.world.onDisposeEntity(this),e){this.uuid=generateUUID(),this.alive=!0;for(let e=0;e<this.queries.length;e++)this.queries[e].removeEntity(this);for(const e in this.components)this.components[e].dispose(),delete this.components[e];for(const e in this._componentsToRemove)delete this._componentsToRemove[e];this.queries.length=0,this.componentTypes.length=0,this._componentTypesToRemove.length=0,this._pool&&this._pool.release(this),this.world.onEntityDisposed(this)}else this.alive=!1,this.world.queueEntityDisposal(this)}}class ObjectPool{constructor(e,t){this.freeList=[],this.count=0,this.baseObject=e,this.isObjectPool=!0,void 0!==t&&this.expand(t)}acquire(){return this.freeList.length<=0&&this.expand(Math.round(.2*this.count)+1),this.freeList.pop()}release(e){e.copy(this.baseObject),this.freeList.push(e)}expand(e){for(var t=0;t<e;t++){const e=this.baseObject.clone();e._pool=this,this.freeList.push(e)}this.count+=e}totalSize(){return this.count}totalFree(){return this.freeList.length}totalUsed(){return this.count-this.freeList.length}}class World{constructor(){if(this.systemManager=new SystemManager(this),this.entityPool=new ObjectPool(new Entity(this)),this.entities=[],this.entitiesByUUID={},this.entitiesWithComponentsToRemove=[],this.entitiesToRemove=[],this.deferredRemovalEnabled=!0,this.componentTypes={},this.componentPools={},this.componentCounts={},this.queries={},this.enabled=!0,"undefined"!=typeof CustomEvent){var e=new CustomEvent("ecsy-world-created",{detail:{world:this,version:Version}});window.dispatchEvent(e)}this.lastTime=performance.now(),this.isWorld=!0}registerComponent(e,t){return this.componentTypes[e.name]?(console.warn(`Component type: '${e.name}' already registered.`),this):(this.componentTypes[e.name]=e,this.componentCounts[e.name]=0,!1===t?t=void 0:void 0===t&&(t=new ObjectPool(new e)),this.componentPools[e.name]=t,this)}registerSystem(e,t){return this.systemManager.registerSystem(e,t),this}createEntity(){const e=this.createDetachedEntity();return this.addEntity(e)}createDetachedEntity(){return this.entityPool.acquire()}addEntity(e){if(this.entitiesByUUID[e.uuid])return console.warn(`Entity ${e.uuid} already added.`),e;this.entitiesByUUID[e.uuid]=e,this.entities.push(e),e.alive=!0;for(let t=0;t<e.componentTypes.length;t++){const o=e.componentTypes[t];this.onComponentAdded(e,o)}return e}getEntityByUUID(e){return this.entitiesByUUID[e]}createComponent(e){const t=this.componentPools[e.name];return t?t.acquire():new e}getComponentPool(e){return this.componentPools[e.name]}getSystem(e){return this.systemManager.getSystem(e)}getSystems(){return this.systemManager.getSystems()}getQuery(e){const t=queryKey(e);let o=this.queries[t];return o||(this.queries[t]=o=new Query(e,this)),o}onComponentAdded(e,t){for(var o in this.componentTypes[t.name]||console.warn(`Component ${t.name} not registered.`),this.componentCounts[t.name]++,this.queries){var n=this.queries[o];~n.NotComponents.indexOf(t)&&~n.entities.indexOf(e)?n.removeEntity(e):~n.Components.indexOf(t)&&n.match(e)&&!~n.entities.indexOf(e)&&n.addEntity(e)}}onComponentChanged(e,t,o){for(var n=0;n<e.queries.length;n++){var s=e.queries[n];s.reactive&&-1!==s.Components.indexOf(t)&&s.eventDispatcher.dispatchEvent(Query.prototype.COMPONENT_CHANGED,e,o)}}queueComponentRemoval(e){-1===this.entitiesWithComponentsToRemove.indexOf(e)&&this.entitiesWithComponentsToRemove.push(e)}onRemoveComponent(e,t){for(var o in this.componentCounts[t.name]--,this.queries){var n=this.queries[o];~n.NotComponents.indexOf(t)&&!~n.entities.indexOf(e)&&n.match(e)?n.addEntity(e):~n.Components.indexOf(t)&&~n.entities.indexOf(e)&&!n.match(e)&&n.removeEntity(e)}}queueEntityDisposal(e){this.entitiesToRemove.push(e)}onDisposeEntity(e){for(var t in this.queries){const o=this.queries[t];-1!==e.queries.indexOf(o)&&o.removeEntity(e)}}onEntityDisposed(e){if(!this.entitiesByUUID[e.uuid])return;delete this.entitiesByUUID[e.uuid];const t=this.entities.indexOf(e);-1!==t&&this.entities.splice(t,1)}execute(e,t){if(!e){let t=performance.now();e=t-this.lastTime,this.lastTime=t}if(this.enabled){if(this.systemManager.execute(e,t),!this.deferredRemovalEnabled)return;for(let e=0;e<this.entitiesToRemove.length;e++){this.entitiesToRemove[e].dispose(!0)}this.entitiesToRemove.length=0;for(let e=0;e<this.entitiesWithComponentsToRemove.length;e++){this.entitiesWithComponentsToRemove[e].processRemovedComponents()}this.entitiesWithComponentsToRemove.length=0}}stop(){this.enabled=!1}play(){this.enabled=!0}stats(){var e={entities:{numEntities:this.entities.length,numQueries:Object.keys(this.queries).length,queries:{},numComponentPool:Object.keys(this.componentPools).length,componentPool:{}},system:this.systemManager.stats()};for(const t in this.queries)e.queries[t]=this.queries[t].stats();for(const t in this.componentPools){const o=this.componentPools[t];e.componentPool[t]={used:o.totalUsed(),size:o.count}}console.log(JSON.stringify(e,null,2))}}class System{canExecute(){if(0===this._mandatoryQueries.length)return!0;for(let e=0;e<this._mandatoryQueries.length;e++){if(0===this._mandatoryQueries[e].entities.length)return!1}return!0}constructor(e,t){if(this.world=e,this.enabled=!0,this._queries={},this.queries={},this.priority=0,this.executeTime=0,t&&t.priority&&(this.priority=t.priority),this._mandatoryQueries=[],this.initialized=!0,this.constructor.queries)for(var o in this.constructor.queries){var n=this.constructor.queries[o],s=n.components;if(!s||0===s.length)throw new Error("'components' attribute can't be empty in a query");var i=this.world.getQuery(s);this._queries[o]=i,!0===n.mandatory&&this._mandatoryQueries.push(i),this.queries[o]={results:i.entities};const e={added:Query.prototype.ENTITY_ADDED,removed:Query.prototype.ENTITY_REMOVED,changed:Query.prototype.COMPONENT_CHANGED};n.listen&&["added","removed","changed"].forEach(t=>{if(n.listen[t]){let s=n.listen[t];if("changed"===t){if(i.reactive=!0,!0===s){let e=this.queries[o][t]=[];i.eventDispatcher.addEventListener(Query.prototype.COMPONENT_CHANGED,t=>{-1===e.indexOf(t)&&e.push(t)})}else if(Array.isArray(s)){let e=this.queries[o][t]=[];i.eventDispatcher.addEventListener(Query.prototype.COMPONENT_CHANGED,(t,o)=>{-1!==s.indexOf(o.constructor)&&-1===e.indexOf(t)&&e.push(t)})}}else{let n=this.queries[o][t]=[];i.eventDispatcher.addEventListener(e[t],e=>{-1===n.indexOf(e)&&n.push(e)})}}})}}stop(){this.executeTime=0,this.enabled=!1}play(){this.enabled=!0}clearEvents(){for(let t in this.queries){var e=this.queries[t];if(e.added&&(e.added.length=0),e.removed&&(e.removed.length=0),e.changed)if(Array.isArray(e.changed))e.changed.length=0;else for(let t in e.changed)e.changed[t].length=0}}toJSON(){var e={name:this.constructor.name,enabled:this.enabled,executeTime:this.executeTime,priority:this.priority,queries:{}};if(this.constructor.queries){var t=this.constructor.queries;for(let o in t){let n=this.queries[o],s=t[o],i=e.queries[o]={key:this._queries[o].key};if(i.mandatory=!0===s.mandatory,i.reactive=s.listen&&(!0===s.listen.added||!0===s.listen.removed||!0===s.listen.changed||Array.isArray(s.listen.changed)),i.reactive){i.listen={},["added","removed","changed"].forEach(e=>{n[e]&&(i.listen[e]={entities:n[e].length})})}}}return e}}function Not(e){return{operator:"not",Component:e}}class Component{constructor(e){const t=this.constructor.schema;for(const o in t){const n=t[o];if(e&&e.hasOwnProperty(o))this[o]=e[o];else if(n.hasOwnProperty("default"))this[o]=n.type.clone(n.default);else{const e=n.type;this[o]=e.clone(e.default)}}this._pool=null}copy(e){const t=this.constructor.schema;for(const o in e)if(t.hasOwnProperty(o)){t[o].type.copy(e,this,o)}return this}clone(){return(new this.constructor).copy(this)}dispose(){this._pool&&this._pool.release(this)}}Component.schema={},Component.isComponent=!0;class SystemStateComponent extends Component{constructor(e){super(e),this.isSystemStateComponent=!0}}SystemStateComponent.isSystemStateComponent=!0;class TagComponent extends Component{constructor(){super(),this.isTagComponent=!0}}TagComponent.isTagComponent=!0;const copyValue=(e,t,o)=>t[o]=e[o],cloneValue=e=>e,copyArray=(e,t,o)=>{const n=e[o],s=t[o];s.length=0;for(let e=0;e<n.length;e++)s.push(n[e]);return s},cloneArray=e=>e.slice(),copyJSON=(e,t,o)=>t[o]=JSON.parse(JSON.stringify(e[o])),cloneJSON=e=>JSON.parse(JSON.stringify(e)),copyCopyable=(e,t,o)=>t[o].copy(e[o]),cloneClonable=e=>e.clone(),createType=(e,t,o)=>({default:e,clone:t,copy:o}),PropTypes={Number:{default:0,clone:cloneValue,copy:copyValue},Boolean:{default:!1,clone:cloneValue,copy:copyValue},String:{default:"",clone:cloneValue,copy:copyValue},Object:{default:void 0,clone:cloneValue,copy:copyValue},Array:{default:[],clone:cloneArray,copy:copyArray},JSON:{default:null,clone:cloneJSON,copy:copyJSON}};function generateId(e){for(var t="",o="ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789",n=o.length,s=0;s<e;s++)t+=o.charAt(Math.floor(Math.random()*n));return t}function injectScript(e,t){var o=document.createElement("script");o.src=e,o.onload=t,(document.head||document.documentElement).appendChild(o)}function hookConsoleAndErrors(e){["error","warning","log"].forEach(t=>{if("function"==typeof console[t]){var o=console[t].bind(console);console[t]=(...n)=>(e.send({method:"console",type:t,args:JSON.stringify(n)}),o.apply(null,n))}}),window.addEventListener("error",t=>{e.send({method:"error",error:JSON.stringify({message:t.error.message,stack:t.error.stack})})})}function includeRemoteIdHTML(e){let t=document.createElement("div");return t.style.cssText="\n    align-items: center;\n    background-color: #333;\n    color: #aaa;\n    display:flex;\n    font-family: Arial;\n    font-size: 1.1em;\n    height: 40px;\n    justify-content: center;\n    left: 0;\n    opacity: 0.9;\n    position: absolute;\n    right: 0;\n    text-align: center;\n    top: 0;\n  ",t.innerHTML=`Open ECSY devtools to connect to this page using the code:&nbsp;<b style="color: #fff">${e}</b>&nbsp;<button onClick="generateNewCode()">Generate new code</button>`,document.body.appendChild(t),t}function enableRemoteDevtools(remoteId){window.generateNewCode=()=>{window.localStorage.clear(),remoteId=generateId(6),window.localStorage.setItem("ecsyRemoteId",remoteId),window.location.reload(!1)},remoteId=remoteId||window.localStorage.getItem("ecsyRemoteId"),remoteId||(remoteId=generateId(6),window.localStorage.setItem("ecsyRemoteId",remoteId));let infoDiv=includeRemoteIdHTML(remoteId);window.__ECSY_REMOTE_DEVTOOLS_INJECTED=!0,window.__ECSY_REMOTE_DEVTOOLS={};let Version="",worldsBeforeLoading=[],onWorldCreated=e=>{var t=e.detail.world;Version=e.detail.version,worldsBeforeLoading.push(t)};window.addEventListener("ecsy-world-created",onWorldCreated);let onLoaded=()=>{var peer=new Peer(remoteId);peer.on("open",()=>{peer.on("connection",connection=>{window.__ECSY_REMOTE_DEVTOOLS.connection=connection,connection.on("open",(function(){infoDiv.innerHTML="Connected",connection.on("data",(function(data){if("init"===data.type){var script=document.createElement("script");script.setAttribute("type","text/javascript"),script.onload=()=>{script.parentNode.removeChild(script),window.removeEventListener("ecsy-world-created",onWorldCreated),worldsBeforeLoading.forEach(e=>{var t=new CustomEvent("ecsy-world-created",{detail:{world:e,version:Version}});window.dispatchEvent(t)})},script.innerHTML=data.script,(document.head||document.documentElement).appendChild(script),script.onload(),hookConsoleAndErrors(connection)}else if("executeScript"===data.type){let value=eval(data.script);data.returnEval&&connection.send({method:"evalReturn",value:value})}}))}))})})};injectScript("https://cdn.jsdelivr.net/npm/peerjs@0.3.20/dist/peer.min.js",onLoaded)}const urlParams=new URLSearchParams(window.location.search);urlParams.has("enable-remote-devtools")&&enableRemoteDevtools(),exports.Component=Component,exports.Not=Not,exports.ObjectPool=ObjectPool,exports.PropTypes=PropTypes,exports.System=System,exports.SystemStateComponent=SystemStateComponent,exports.TagComponent=TagComponent,exports.Version=Version,exports.World=World,exports._wrapImmutableComponent=wrapImmutableComponent,exports.cloneArray=cloneArray,exports.cloneClonable=cloneClonable,exports.cloneJSON=cloneJSON,exports.cloneValue=cloneValue,exports.copyArray=copyArray,exports.copyCopyable=copyCopyable,exports.copyJSON=copyJSON,exports.copyValue=copyValue,exports.createType=createType,exports.enableRemoteDevtools=enableRemoteDevtools,Object.defineProperty(exports,"__esModule",{value:!0})}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
